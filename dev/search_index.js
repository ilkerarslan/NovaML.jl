var documenterSearchIndex = {"docs":
[{"location":"user_guide/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"user_guide/getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"You can install NovaML.jl using Julia's package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"pkg> add NovaML","category":"page"},{"location":"user_guide/getting_started/#Usage","page":"Getting Started","title":"Usage","text":"","category":"section"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"The most prominent feature of NovaML is using functors (callable objects) to keep parameters as well as training and prediction. Assume model represents a supervised algorithm. The struct model keeps learned parameters and hyperparameters. It also behave as a function. ","category":"page"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"model(X, y) trains the model. \nmodel(Xnew) calculates the predictions for Xnew. ","category":"page"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here's a quick example of how to use NovaML.jl for a binary classification task:","category":"page"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"using NovaML.Datasets\nX, y = load_iris(return_X_y=true)\n\nusing NovaML.ModelSelection\nXtrn, Xtst, ytrn, ytst = train_test_split(X, y, test_size=0.2)\n\nusing NovaML.ModelSelection\nXtrn, Xtst, ytrn, ytst = train_test_split(X, y, test_size=0.2)\n\n# Scale features\nusing NovaML.PreProcessing\nscaler = StandardScaler()\nscaler.fitted # false\n\n# Fit and transform\nXtrnstd = scaler(Xtrn) \n# transform with the fitted model\nXtststd = scaler(Xtst)\n\n# Train a model\nusing NovaML.LinearModel\nlr = LogisticRegression(η=0.1, num_iter=100)\n\nusing NovaML.MultiClass\novr = OneVsRestClassifier(lr)\n\n# Fit the model\novr(Xtrnstd, ytrn)\n\n# Make predictions\nŷtrn = ovr(Xtrnstd)\nŷtst = ovr(Xtststd)\n\n# Evaluate the model\nusing NovaML.Metrics\nacc_trn = accuracy_score(ytrn, ŷtrn);\nacc_tst = accuracy_score(ytst, ŷtst);\n\nprintln(\"Training accuracy: $acc_trn\")\nprintln(\"Test accuracy: $acc_tst\")\n# Training accuracy: 0.9833333333333333\n# Test accuracy: 0.9666666666666667","category":"page"},{"location":"#NovaML.jl","page":"Home","title":"NovaML.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"⚠️ IMPORTANT NOTE: NovaML.jl is currently in alpha stage. It is under active development and may contain bugs or incomplete features. Users should exercise caution and avoid using NovaML.jl in production environments at this time. We appreciate your interest and welcome feedback and contributions to help improve the package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"NovaML.jl aims to provide a comprehensive and user-friendly machine learning framework written in Julia. Its objective is providing a unified API for various machine learning tasks, including supervised learning, unsupervised learning, and preprocessing, feature engineering etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Main objective of NovaML.jl is to increase the usage of Julia in daily data science and machine learning activities among students and practitioners.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, the module and function naming in NovaML is similar to that of Scikit Learn to provide a familiarity to data science and machine learning practitioners. However, NovaML is not a wrapper of ScikitLearn.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Unified API using Julia's multiple dispatch and functor-style callable objects\nAlgorithms for classification, regression, and clustering\nPreprocessing tools for data scaling, encoding, and imputation\nModel selection and evaluation utilities\nEnsemble methods","category":"page"},{"location":"models/clustering/#Clustering-Algorithms","page":"Clustering","title":"Clustering Algorithms","text":"","category":"section"},{"location":"models/clustering/#Agglomerative-Clustering","page":"Clustering","title":"Agglomerative Clustering","text":"","category":"section"},{"location":"models/clustering/#DBSCAN","page":"Clustering","title":"DBSCAN","text":"","category":"section"},{"location":"models/clustering/#KMeans","page":"Clustering","title":"KMeans","text":"","category":"section"}]
}
