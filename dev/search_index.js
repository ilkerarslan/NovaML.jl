var documenterSearchIndex = {"docs":
[{"location":"user_guide/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"user_guide/getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"You can install NovaML.jl using Julia's package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"pkg> add NovaML","category":"page"},{"location":"user_guide/getting_started/#Usage","page":"Getting Started","title":"Usage","text":"","category":"section"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"The most prominent feature of NovaML is using functors (callable objects) to keep parameters as well as training and prediction. Assume model represents a supervised algorithm. The struct model keeps learned parameters and hyperparameters. It also behave as a function. ","category":"page"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"model(X, y) trains the model. \nmodel(Xnew) calculates the predictions for Xnew. ","category":"page"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"Here's a quick example of how to use NovaML.jl for a binary classification task:","category":"page"},{"location":"user_guide/getting_started/","page":"Getting Started","title":"Getting Started","text":"using NovaML.Datasets\nX, y = load_iris(return_X_y=true)\n\nusing NovaML.ModelSelection\nXtrn, Xtst, ytrn, ytst = train_test_split(X, y, test_size=0.2)\n\nusing NovaML.ModelSelection\nXtrn, Xtst, ytrn, ytst = train_test_split(X, y, test_size=0.2)\n\n# Scale features\nusing NovaML.PreProcessing\nscaler = StandardScaler()\nscaler.fitted # false\n\n# Fit and transform\nXtrnstd = scaler(Xtrn) \n# transform with the fitted model\nXtststd = scaler(Xtst)\n\n# Train a model\nusing NovaML.LinearModel\nlr = LogisticRegression(η=0.1, num_iter=100)\n\nusing NovaML.MultiClass\novr = OneVsRestClassifier(lr)\n\n# Fit the model\novr(Xtrnstd, ytrn)\n\n# Make predictions\nŷtrn = ovr(Xtrnstd)\nŷtst = ovr(Xtststd)\n\n# Evaluate the model\nusing NovaML.Metrics\nacc_trn = accuracy_score(ytrn, ŷtrn);\nacc_tst = accuracy_score(ytst, ŷtst);\n\nprintln(\"Training accuracy: $acc_trn\")\nprintln(\"Test accuracy: $acc_tst\")\n# Training accuracy: 0.9833333333333333\n# Test accuracy: 0.9666666666666667","category":"page"},{"location":"user_guide/core_concepts/#Core-Concepts","page":"Core Concepts","title":"Core Concepts","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"NovaML.jl is designed with simplicity, flexibility, and performance in mind. Understanding the core concepts will help you make the most of the library.","category":"page"},{"location":"user_guide/core_concepts/#Functor-based-API","page":"Core Concepts","title":"Functor-based API","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"One of the distinguishing features of NovaML is its use of functors (callable objects) for model training, prediction, and data transformation. This approach leverages Julia's multiple dispatch system to provide a clean and intuitive API.","category":"page"},{"location":"user_guide/core_concepts/#Models","page":"Core Concepts","title":"Models","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"For supervised learning models:","category":"page"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"model(X, y): Trains the model on input data X and target values y.\nmodel(X): Makes predictions on new data X.\nmodel(X, type=:probs): Computes probability predictions (for classifiers).","category":"page"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"For unsupervised learning models:","category":"page"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"model(X): Fits the model to the data X.","category":"page"},{"location":"user_guide/core_concepts/#Transformers","page":"Core Concepts","title":"Transformers","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"For data preprocessing and feature engineering:","category":"page"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"transformer(X): Fits the transformer to the data X and applies the transformation.\ntransformer(X, type=:inverse_transform): Applies the inverse transformation (if available).","category":"page"},{"location":"user_guide/core_concepts/#Abstract-Types","page":"Core Concepts","title":"Abstract Types","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"NovaML uses a hierarchy of abstract types to organize its components:","category":"page"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"AbstractModel: Base type for all machine learning models.\nAbstractMultiClass: Subtype of AbstractModel for multi-class classifiers.\nAbstractScaler: Base type for scaling transformers.","category":"page"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"These abstract types allow for easy extension and customization of the library.","category":"page"},{"location":"user_guide/core_concepts/#Unified-API","page":"Core Concepts","title":"Unified API","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"NovaML strives to provide a consistent interface across different types of models and tasks. This unified API makes it easier to switch between different algorithms and encourages experimentation.","category":"page"},{"location":"user_guide/core_concepts/#Pipelines","page":"Core Concepts","title":"Pipelines","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"NovaML supports the creation of machine learning pipelines, which allow you to chain multiple steps of data preprocessing and model training into a single object. Pipelines can be treated as models themselves, simplifying complex workflows.","category":"page"},{"location":"user_guide/core_concepts/#Hyperparameter-Tuning","page":"Core Concepts","title":"Hyperparameter Tuning","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"The library includes tools for automated hyperparameter tuning, such as grid search and random search. These can be easily integrated with cross-validation techniques to find optimal model configurations.","category":"page"},{"location":"user_guide/core_concepts/#Metrics-and-Evaluation","page":"Core Concepts","title":"Metrics and Evaluation","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"NovaML provides a range of metrics for evaluating model performance, as well as utilities for cross-validation and model selection.","category":"page"},{"location":"user_guide/core_concepts/#Data-Handling","page":"Core Concepts","title":"Data Handling","text":"","category":"section"},{"location":"user_guide/core_concepts/","page":"Core Concepts","title":"Core Concepts","text":"The library is designed to work seamlessly with Julia's native array types and supports both dense and sparse data structures.","category":"page"},{"location":"#NovaML.jl","page":"Home","title":"NovaML.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"⚠️ IMPORTANT NOTE: NovaML.jl is currently in alpha stage. It is under active development and may contain bugs or incomplete features. Users should exercise caution and avoid using NovaML.jl in production environments at this time. We appreciate your interest and welcome feedback and contributions to help improve the package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"NovaML.jl aims to provide a comprehensive and user-friendly machine learning framework written in Julia. Its objective is providing a unified API for various machine learning tasks, including supervised learning, unsupervised learning, and preprocessing, feature engineering etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Main objective of NovaML.jl is to increase the usage of Julia in daily data science and machine learning activities among students and practitioners.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, the module and function naming in NovaML is similar to that of Scikit Learn to provide a familiarity to data science and machine learning practitioners. However, NovaML is not a wrapper of ScikitLearn.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Unified API using Julia's multiple dispatch and functor-style callable objects\nAlgorithms for classification, regression, and clustering\nPreprocessing tools for data scaling, encoding, and imputation\nModel selection and evaluation utilities\nEnsemble methods","category":"page"},{"location":"models/clustering/#Clustering-Algorithms","page":"Clustering","title":"Clustering Algorithms","text":"","category":"section"},{"location":"models/clustering/#Agglomerative-Clustering","page":"Clustering","title":"Agglomerative Clustering","text":"","category":"section"},{"location":"models/clustering/#DBSCAN","page":"Clustering","title":"DBSCAN","text":"","category":"section"},{"location":"models/clustering/#KMeans","page":"Clustering","title":"KMeans","text":"","category":"section"}]
}
